import numpy as np

def BiotSavart(Coil_Trace, Current, Points_Pos):
    """
    Calculate the magnetic field generated by a current-carrying coil at specified spatial points
    using the Biot-Savart Law.
    
    Parameters:
    Coil_Trace : numpy.ndarray, shape [n_nodes, 3], units: meters (m)
        3D coordinate trace of the coil, where each node contains (x, y, z) coordinates
    
    Current : float, unit: amperes (A)
        Electric current flowing through the coil
    
    Points_Pos : numpy.ndarray, shape [n_points, 3], units: meters (m)
        Coordinates of spatial points where magnetic field needs to be calculated
    
    Returns:
    B : numpy.ndarray, shape [n_points, 3], units: tesla (T)
        Magnetic field vector (Bx, By, Bz) at each spatial point
    """
    mu0=4*np.pi*1e-7 #(T/m/A)
    Distance_Cube = (np.linalg.norm(Points_Pos[:,np.newaxis,:]-Coil_Trace[np.newaxis,:,:],axis=-1,ord=2))**3+1e-15
    Coil_Trace_Center = (Coil_Trace[:-1]+Coil_Trace[1:])/2
    dBx = ((Coil_Trace[1:,1]-Coil_Trace[:-1,1])*(Points_Pos[:,2][:,np.newaxis]-Coil_Trace_Center[:,2][np.newaxis,:]) - (Coil_Trace[1:,2]-Coil_Trace[:-1,2])*(Points_Pos[:,1][:,np.newaxis]-Coil_Trace_Center[:,1][np.newaxis,:]))/Distance_Cube[:,:-1]
    dBy = ((Coil_Trace[1:,2]-Coil_Trace[:-1,2])*(Points_Pos[:,0][:,np.newaxis]-Coil_Trace_Center[:,0][np.newaxis,:]) - (Coil_Trace[1:,0]-Coil_Trace[:-1,0])*(Points_Pos[:,2][:,np.newaxis]-Coil_Trace_Center[:,2][np.newaxis,:]))/Distance_Cube[:,:-1]
    dBz = ((Coil_Trace[1:,0]-Coil_Trace[:-1,0])*(Points_Pos[:,1][:,np.newaxis]-Coil_Trace_Center[:,1][np.newaxis,:]) - (Coil_Trace[1:,1]-Coil_Trace[:-1,1])*(Points_Pos[:,0][:,np.newaxis]-Coil_Trace_Center[:,0][np.newaxis,:]))/Distance_Cube[:,:-1]
    dB = np.array([dBx.T,dBy.T,dBz.T]).T
    B = mu0*Current*dB.sum(axis=1)/(4*np.pi)
    return B